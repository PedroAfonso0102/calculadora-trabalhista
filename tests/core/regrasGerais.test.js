/**
 * Testes das Regras Gerais de C√°lculo
 * 
 * Testes unit√°rios para as fun√ß√µes de c√°lculo de INSS, IRRF e outras regras.
 * Execute no navegador para validar os c√°lculos.
 */

// Fun√ß√£o simples de teste
function teste(descricao, funcao) {
  try {
    funcao();
    console.log(`‚úÖ ${descricao}`);
  } catch (error) {
    console.error(`‚ùå ${descricao}: ${error.message}`);
  }
}

function assert(condicao, mensagem) {
  if (!condicao) {
    throw new Error(mensagem);
  }
}

function aproximadamenteIgual(valor1, valor2, tolerancia = 0.01) {
  return Math.abs(valor1 - valor2) <= tolerancia;
}

// Importar fun√ß√µes para teste (simular import)
async function executarTestes() {
  console.log('üöÄ Iniciando testes das regras gerais...\n');
  
  // Simular carregamento das fun√ß√µes (em produ√ß√£o seriam importadas)
  const { calcularINSS, calcularIRRF, calcularSalarioFamilia } = await import('../js/core/regrasGerais.js');
  
  // Testes de INSS
  console.log('üìã Testando c√°lculo de INSS:');
  
  teste('INSS - Sal√°rio m√≠nimo (R$ 1.518,00)', () => {
    const resultado = calcularINSS(1518.00);
    const esperado = 1518.00 * 0.075; // 7,5%
    assert(aproximadamenteIgual(resultado, esperado), `Esperado ${esperado}, obtido ${resultado}`);
  });
  
  teste('INSS - Valor na segunda faixa (R$ 2.000,00)', () => {
    const resultado = calcularINSS(2000.00);
    // Primeira faixa: 1518 * 0.075 = 113.85
    // Segunda faixa: (2000 - 1518) * 0.09 = 43.38
    // Total: 157.23
    const esperado = 157.23;
    assert(aproximadamenteIgual(resultado, esperado), `Esperado ${esperado}, obtido ${resultado}`);
  });
  
  teste('INSS - Valor no teto (R$ 8.157,41)', () => {
    const resultado = calcularINSS(10000.00); // Valor acima do teto
    // Deve calcular apenas at√© o teto
    const esperado = 954.16; // Valor m√°ximo do INSS em 2025
    assert(aproximadamenteIgual(resultado, esperado, 1), `Esperado aproximadamente ${esperado}, obtido ${resultado}`);
  });
  
  teste('INSS - Valor zero', () => {
    const resultado = calcularINSS(0);
    assert(resultado === 0, `Esperado 0, obtido ${resultado}`);
  });
  
  // Testes de IRRF
  console.log('\nüìã Testando c√°lculo de IRRF:');
  
  teste('IRRF - Valor isento (R$ 2.000,00)', () => {
    const resultado = calcularIRRF(2000.00, 0);
    assert(resultado === 0, `Esperado 0, obtido ${resultado}`);
  });
  
  teste('IRRF - Com dependentes', () => {
    const baseCalculo = 3000.00;
    const dependentes = 2;
    const resultado = calcularIRRF(baseCalculo, dependentes);
    
    // Base ajustada: 3000 - (2 * 189.59) = 2620.82
    // Como est√° na primeira faixa (isento at√© 2428.80), deve ter IRRF
    assert(resultado >= 0, `IRRF deve ser >= 0, obtido ${resultado}`);
  });
  
  // Testes de Sal√°rio Fam√≠lia
  console.log('\nüìã Testando c√°lculo de Sal√°rio Fam√≠lia:');
  
  teste('Sal√°rio Fam√≠lia - Dentro do limite', () => {
    const resultado = calcularSalarioFamilia(1500.00, 2);
    const esperado = 2 * 65.00; // 2 filhos * R$ 65,00
    assert(resultado === esperado, `Esperado ${esperado}, obtido ${resultado}`);
  });
  
  teste('Sal√°rio Fam√≠lia - Acima do limite', () => {
    const resultado = calcularSalarioFamilia(2000.00, 2);
    assert(resultado === 0, `Esperado 0, obtido ${resultado}`);
  });
  
  teste('Sal√°rio Fam√≠lia - Sem filhos', () => {
    const resultado = calcularSalarioFamilia(1500.00, 0);
    assert(resultado === 0, `Esperado 0, obtido ${resultado}`);
  });
  
  console.log('\n‚úÖ Todos os testes das regras gerais conclu√≠dos!');
}

// Testes dos m√≥dulos de c√°lculo
async function testarModulosCalculo() {
  console.log('\nüöÄ Iniciando testes dos m√≥dulos de c√°lculo...\n');
  
  const { calcularSalarioLiquido } = await import('../js/core/calculoSalario.js');
  const { calcularFerias } = await import('../js/core/calculoFerias.js');
  const { calcularDecimoTerceiro } = await import('../js/core/calculoDecimo.js');
  
  // Teste de Sal√°rio L√≠quido
  console.log('üìã Testando c√°lculo de Sal√°rio L√≠quido:');
  
  teste('Sal√°rio L√≠quido - Caso b√°sico', () => {
    const dados = {
      salarioBruto: 3000.00,
      dependentes: 1,
      outrosDescontos: 100.00
    };
    
    const resultado = calcularSalarioLiquido(dados);
    
    assert(resultado.tipo === 'salario_mensal', 'Tipo deve ser salario_mensal');
    assert(resultado.resumo.salarioLiquido.valor > 0, 'Sal√°rio l√≠quido deve ser positivo');
    assert(resultado.proventos.salarioBruto.valor === 3000.00, 'Sal√°rio bruto deve ser mantido');
  });
  
  // Teste de F√©rias
  console.log('\nüìã Testando c√°lculo de F√©rias:');
  
  teste('F√©rias - 30 dias sem faltas', () => {
    const dados = {
      salarioBruto: 3000.00,
      diasFerias: 30,
      faltasInjustificadas: 0,
      abonoPecuniario: false,
      dependentes: 0
    };
    
    const resultado = calcularFerias(dados);
    
    assert(resultado.tipo === 'ferias', 'Tipo deve ser ferias');
    assert(resultado.direitos.diasDireito.valor === 30, 'Deve ter direito a 30 dias');
    assert(resultado.proventos.valorFerias.valor === 3000.00, 'Valor das f√©rias deve ser igual ao sal√°rio');
  });
  
  teste('F√©rias - Com abono pecuni√°rio', () => {
    const dados = {
      salarioBruto: 3000.00,
      diasFerias: 30,
      faltasInjustificadas: 0,
      abonoPecuniario: true,
      dependentes: 0
    };
    
    const resultado = calcularFerias(dados);
    
    assert(resultado.proventos.valorAbono !== undefined, 'Deve ter abono pecuni√°rio');
    assert(resultado.proventos.tercoAbono !== undefined, 'Deve ter ter√ßo do abono');
  });
  
  // Teste de 13¬∫ Sal√°rio
  console.log('\nüìã Testando c√°lculo de 13¬∫ Sal√°rio:');
  
  teste('13¬∫ Sal√°rio - 12 meses', () => {
    const dados = {
      salarioBruto: 3000.00,
      mesesTrabalhados: 12,
      dependentes: 0
    };
    
    const resultado = calcularDecimoTerceiro(dados);
    
    assert(resultado.tipo === 'decimo_terceiro', 'Tipo deve ser decimo_terceiro');
    assert(resultado.calculo.valorBrutoTotal.valor === 3000.00, 'Valor bruto deve ser igual ao sal√°rio');
    assert(resultado.parcelas.primeiraParcela.valor === 1500.00, 'Primeira parcela deve ser metade');
  });
  
  teste('13¬∫ Sal√°rio - 6 meses (proporcional)', () => {
    const dados = {
      salarioBruto: 3000.00,
      mesesTrabalhados: 6,
      dependentes: 0
    };
    
    const resultado = calcularDecimoTerceiro(dados);
    
    const valorEsperado = (3000.00 / 12) * 6; // 1500.00
    assert(aproximadamenteIgual(resultado.calculo.valorBrutoTotal.valor, valorEsperado), 
           `Valor proporcional deve ser ${valorEsperado}`);
  });
  
  console.log('\n‚úÖ Todos os testes dos m√≥dulos conclu√≠dos!');
}

// Testes de integra√ß√£o
async function testarIntegracao() {
  console.log('\nüöÄ Iniciando testes de integra√ß√£o...\n');
  
  const { calcularRescisao } = await import('../js/core/calculoRescisao.js');
  
  console.log('üìã Testando c√°lculo de Rescis√£o:');
  
  teste('Rescis√£o - Dispensa sem justa causa', () => {
    const dados = {
      salarioBruto: 3000.00,
      dataAdmissao: '2023-01-01',
      dataSaida: '2025-01-01',
      motivoRescisao: 'sem_justa_causa',
      avisoPrevio: 'indenizado',
      feriasVencidas: 0,
      dependentes: 0
    };
    
    const resultado = calcularRescisao(dados);
    
    assert(resultado.tipo === 'rescisao', 'Tipo deve ser rescisao');
    assert(resultado.verbas.saldoSalario !== undefined, 'Deve ter saldo de sal√°rio');
    assert(resultado.verbas.avisoPrevio !== undefined, 'Deve ter aviso pr√©vio');
    assert(resultado.verbas.decimoTerceiro !== undefined, 'Deve ter 13¬∫ proporcional');
    assert(resultado.verbas.multaFGTS !== undefined, 'Deve ter multa FGTS');
  });
  
  teste('Rescis√£o - Pedido de demiss√£o', () => {
    const dados = {
      salarioBruto: 3000.00,
      dataAdmissao: '2023-01-01',
      dataSaida: '2025-01-01',
      motivoRescisao: 'pedido_demissao',
      avisoPrevio: 'indenizado',
      feriasVencidas: 0,
      dependentes: 0
    };
    
    const resultado = calcularRescisao(dados);
    
    assert(resultado.verbas.multaFGTS === undefined, 'N√£o deve ter multa FGTS');
    assert(resultado.descontos.avisoPrevio !== undefined, 'Deve ter desconto do aviso pr√©vio');
  });
  
  teste('Rescis√£o - Justa causa', () => {
    const dados = {
      salarioBruto: 3000.00,
      dataAdmissao: '2023-01-01',
      dataSaida: '2025-01-01',
      motivoRescisao: 'justa_causa',
      avisoPrevio: 'nao_aplicavel',
      feriasVencidas: 0,
      dependentes: 0
    };
    
    const resultado = calcularRescisao(dados);
    
    assert(resultado.verbas.avisoPrevio === undefined, 'N√£o deve ter aviso pr√©vio');
    assert(resultado.verbas.decimoTerceiro === undefined, 'N√£o deve ter 13¬∫ proporcional');
    assert(resultado.verbas.multaFGTS === undefined, 'N√£o deve ter multa FGTS');
  });
  
  console.log('\n‚úÖ Todos os testes de integra√ß√£o conclu√≠dos!');
}

// Executar todos os testes
async function executarTodosOsTestes() {
  try {
    await executarTestes();
    await testarModulosCalculo();
    await testarIntegracao();
    
    console.log('\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO! üéâ');
    console.log('\nüìä Resumo:');
    console.log('- Regras gerais: ‚úÖ');
    console.log('- M√≥dulos de c√°lculo: ‚úÖ');
    console.log('- Integra√ß√£o: ‚úÖ');
    console.log('\nA calculadora est√° funcionando corretamente!');
    
  } catch (error) {
    console.error('\nüí• Erro durante os testes:', error);
  }
}

// Exportar para uso
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    executarTodos: executarTodosOsTestes,
    testarRegrasGerais: executarTestes,
    testarModulos: testarModulosCalculo,
    testarIntegracao: testarIntegracao
  };
}

// Executar automaticamente se estiver no navegador
if (typeof window !== 'undefined') {
  // Aguardar carregamento da p√°gina
  window.addEventListener('load', () => {
    // Aguardar um pouco para garantir que os m√≥dulos est√£o carregados
    setTimeout(executarTodosOsTestes, 1000);
  });
}